package ru.bio4j.ng.service.types;

import org.osgi.framework.BundleContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.bio4j.ng.commons.utils.Bundles;
import ru.bio4j.ng.service.api.LoginProcessor;
import ru.bio4j.ng.service.api.SecurityErrorHandler;

public class LoginHelper {
    private static final Logger LOG = LoggerFactory.getLogger(RestServiceBase.class);

    private LoginHelper() { /* hidden constructor */ }

    public static void init(BundleContext context) {
        SingletonContainer.init(context);
    }
    public static LoginProcessor getLPInstance() {
        return SingletonContainer.LOGINPROCESSOR;
    }
    public static SecurityErrorHandler getSEHInstance() {
        return SingletonContainer.SECURITYERRORHANDLER;
    }

    private static class SingletonContainer {
        public static LoginProcessor LOGINPROCESSOR;
        public static SecurityErrorHandler SECURITYERRORHANDLER;

        private static volatile boolean inited = false;
        public synchronized static void init(BundleContext context) {
            if(!inited) {
                LOG.debug("Try init LoginHelper...");
                LOGINPROCESSOR = Bundles.createServiceImplInBundle(context, LoginProcessor.class, DefaultLoginProcessor.class);
                SECURITYERRORHANDLER = Bundles.createServiceImplInBundle(context, SecurityErrorHandler.class, DefaultSecurityErrorHandler.class);
                inited = true;
                LOG.debug("LoginHelper inited!");
            }
        }
    }
}
